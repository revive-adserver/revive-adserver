name: Test Runner

on:
  workflow_call: ~

concurrency:
  group: ci-${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}

permissions:
  checks: write

jobs:
  run-tests:
    name: Run tests

    runs-on: ubuntu-24.04

    strategy:
      fail-fast: false
      matrix:
        php-version:
          - "8.1"
          - "8.2"
          - "8.3"
          - "8.4"

        db-type:
          - mysqli
          - pgsql

        table-type:
          - pgsql
          - myisam
          - innodb

        audit:
          - no-audit
          - audit

        exclude:
          - db-type: pgsql
            table-type: myisam
          - db-type: pgsql
            table-type: innodb
          - db-type: mysqli
            table-type: pgsql
          - audit: audit
            php-version: "8.1"
          - audit: audit
            php-version: "8.2"
          - audit: audit
            php-version: "8.3"

        include:
          - coverage: none
          - db-user: postgres
          - db-port: 5432
          - db-type: mysqli
            db-user: root
            db-port: 3306
          - audit: audit
            coverage: pcov

    services:
      postgres:
        image: ${{ ( matrix.db-type == 'pgsql' ) && 'postgres:latest' || '' }}
        env:
          POSTGRES_PASSWORD: secret
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      mysql:
        image: ${{ ( matrix.db-type != 'pgsql' ) && 'mysql:5.7' || '' }}
        env:
          MYSQL_USER: user
          MYSQL_PASSWORD: secret
          MYSQL_DATABASE: test_revive
          MYSQL_ROOT_PASSWORD: secret
        options: >-
          --health-cmd "mysqladmin ping" 
          --health-interval 5s 
          --health-timeout 2s
          --health-retries 5
        ports:
          - 3306:3306

    env:
      PHP_EXTENSIONS: none, ctype, curl, dom, fileinfo, intl, json, libxml, mbstring, mysqli, openssl, pgsql, simplexml, tokenizer, xml, xmlwriter, zip
      PHP_INI_VALUES: memory_limit=-1, assert.exception=1, zend.assertions=1, error_reporting=-1, log_errors_max_len=0, display_errors=On

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install ant 1.7
        run: |
          curl -s -O http://archive.debian.org/debian-archive/debian/pool/main/a/ant1.7/ant1.7_1.7.1-7_all.deb
          curl -s -O http://archive.debian.org/debian-archive/debian/pool/main/a/ant1.7/ant1.7-optional_1.7.1-7_all.deb
          sudo apt-get -y -qq remove ant
          sudo apt-get -y -qq install libxerces2-java
          sudo dpkg -i ant1.7_1.7.1-7_all.deb
          sudo dpkg -i ant1.7-optional_1.7.1-7_all.deb
          rm *.deb

      - name: Install PHP with extensions
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: ${{ env.PHP_EXTENSIONS }}
          ini-values: pcov.directory=$GITHUB_WORKSPACE, ${{ env.PHP_INI_VALUES }}
          coverage: ${{ matrix.coverage }}
          tools: composer

      - name: Get Composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: "${{ steps.composer-cache.outputs.dir }}"
          key: "php-${{ matrix.php-version }}-composer-${{ hashFiles('**/composer.lock') }}"
          restore-keys: |
            php-${{ matrix.php-version }}-composer-

      - name: Install dependencies with Composer
        run: composer install --no-interaction --no-ansi --no-progress

      - name: Generate configuration file
        run: |
          cat > devel.xml <<EOF
          <tests>
          <php>
          <version name="php" executable="php"/>
          </php>
          <database>
          <version name="${{ matrix.db-type }}" db.type="${{ matrix.db-type }}" db.host="127.0.0.1" db.port="${{ matrix.db-port }}" db.username="${{ matrix.db-user }}" db.password="secret" db.name="test_revive" db.table.type="${{ matrix.table-type }}"/>
          </database>
          <audit>
          <settings enabled="${{ matrix.audit == 'audit' && '0' || '1' }}"/>
          </audit>
          </tests>
          EOF

      - name: Run tests
        run: ant test-all

      - name: Upload test and coverage reports
        uses: actions/upload-artifact@v4
        if: always() # always run even if the previous step fails
        with:
          name: test-results-${{ matrix.php-version }}-${{ matrix.db-type }}-${{ matrix.table-type }}-${{ matrix.audit }}
          path: '**/build/test-*'
          retention-days: 1

  report:
    name: Collect results

    runs-on: ubuntu-24.04

    needs:
      - run-tests

    if: always() && needs.run-tests.result != 'cancelled' && needs.run-tests.result != 'skipped'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Test Report
        uses: dawidd6/action-download-artifact@v9
        with:
          run_id: ${{ github.run_id }}
          name: test-results-.*
          name_is_regexp: true
          if_no_artifact_found: warn

      - name: Publish Test Report
        uses: dorny/test-reporter@v1
        with:
          name: Test suite results
          path: '**/build/test-reports/*.xml'
          reporter: java-junit
          only-summary: true

      - name: Install PHP with extensions
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.3
          ini-values: memory_limit=-1
          tools: phive

      - name: Restructure files and build coverage results
        run: |
          phive install phpcov --trust-gpg-keys 4AA394086372C20A
          mkdir -p tests
          mv test-results-* tests/
          mkdir -p coverage
          mv tests/*/build/test-coverage/* coverage/
          ./tools/phpcov merge --clover coverage.xml coverage

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload test results to Codecov
        uses: codecov/test-results-action@v1
        with:
          directory: tests
          token: ${{ secrets.CODECOV_TOKEN }}
